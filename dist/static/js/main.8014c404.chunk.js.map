{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authActions.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/episodes/EpisodeSummary.js","components/episodes/EpisodeList.js","components/dashboard/Dashboard.js","components/episodes/EpisodeDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","store/actions/episodeActions.js","components/episodes/CreateEpisode.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/episodeReducer.js","store/reducers/rootReducer.js","config/firebaseConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","initials","SignedOutLinks","state","console","log","firebase","profile","links","uid","Notifications","notifications","map","item","key","id","user","content","moment","time","toDate","fromNow","EpisodeSummary","episode","title","createdAt","calendar","EpisodeList","episodes","Dashboard","this","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","SignIn","email","password","handleOnChange","e","setState","target","value","handleOnSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","error","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","set","toUpperCase","createEpisode","authorID","add","authorFirstName","authorLastName","Date","CreateEpisode","history","push","App","exact","path","component","EpisodeDetails","Boolean","window","location","hostname","initState","authReducer","action","message","episodeReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","firebaseConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8014c404.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { signOut } from '../../store/actions/authActions'\n\nconst SignedInLinks = (props) => {\n  return (\n    <ul className=\"c-SignedInLinks\">\n      <li>\n        <NavLink to=\"/create\">\n          New Episode\n        </NavLink>\n      </li>\n      <li>\n        <button onClick={props.signOut}>Logout</button>\n      </li>\n      <li>\n        <NavLink to=\"/\" className=\"c-SignedInLinks__user\">{props.initials}</NavLink>\n      </li>\n    </ul>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signOut: () => dispatch(signOut())\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SignedInLinks)","export const signIn = (credentials) => {\n  return (dispatch, getState, {getFirebase}) => {\n    const firebase = getFirebase()\n\n    firebase.auth().signInWithEmailAndPassword(\n      credentials.email,\n      credentials.password\n    ).then(() => {\n      dispatch({type: 'LOGIN_SUCCESS'})\n    }).catch((error) => {\n      dispatch({type: 'LOGIN_ERROR', error})\n    })\n  }\n}\n\nexport const signOut = () => {\n  return (dispatch, getState, {getFirebase}) => {\n    const firebase = getFirebase()\n\n    firebase.auth().signOut().then(() => {\n      dispatch({type: 'SIGNOUT_SUCCESS'})\n    })\n  }\n}\n\nexport const signUp = (newUser) => {\n  return (dispatch, getState, {getFirebase, getFirestore}) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n\n    firebase.auth().createUserWithEmailAndPassword(\n      newUser.email,\n      newUser.password\n    ).then((resp) => {\n      return firestore.collection('users').doc(resp.user.uid).set({\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        initials: newUser.firstName[0].toUpperCase() + newUser.lastName[0].toUpperCase()\n      })\n    }).then(() => {\n      dispatch({type: 'SIGNUP_SUCCESS'})\n    }).catch((error) => {\n      dispatch({type: 'SIGNUP_ERROR', error})\n    })\n  }\n}","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst SignedOutLinks = () => {\n  return (\n    <ul className=\"c-SignedOutLinks\">\n      <li>\n        <NavLink to=\"/signup\">\n          Sign up\n        </NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/signin\">\n          Login\n        </NavLink>\n      </li>\n    </ul>\n  )\n}\n\nexport default SignedOutLinks","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport SignedInLinks from './SignedInLinks'\nimport SignedOutLinks from './SignedOutLinks'\nimport { connect } from 'react-redux'\n\nconst Navbar = (props) => {\n  const { auth, profile } = props\n  const links = auth.uid ? <SignedInLinks initials={profile.initials} /> : <SignedOutLinks />\n\n  return (\n    <nav className=\"c-Navbar\">\n      <Link to=\"/\">\n        Home\n      </Link>\n      {links}\n    </nav>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  console.log(state)\n  return {\n    auth: state.firebase.auth,\n    profile: state.firebase.profile\n  }\n}\n\nexport default connect(mapStateToProps)(Navbar)","import React from 'react'\nimport moment from 'moment'\n\nconst Notifications = ({ notifications }) => {\n  return (\n    <div className=\"c-Notifications\">\n      <h3 className=\"c-Notifications__title\">Notifications</h3>\n        <ul className=\"c-Notifications__list\">\n          {notifications && notifications.map(item => {\n            return (\n              <li key={item.id} className=\"c-Notifications__list-item\">\n                <p>{item.user} {item.content}</p>\n                <p>{moment(item.time.toDate()).fromNow()}</p>\n              </li>\n            )\n          })}\n        </ul>\n    </div>\n  )\n}\n\nexport default Notifications","import React from 'react'\nimport moment from 'moment'\n\nconst EpisodeSummary = ({episode}) => {\n  return (\n    <div className=\"c-EpisodeSummary\">\n      <h2 className=\"c-EpisodeSummary__title\">\n        {episode.title}\n      </h2>\n      <p className=\"c-EpisodeSummary__date\">\n        Plan created: {moment(episode.createdAt.toDate()).calendar()}\n      </p>\n    </div>\n  )\n}\n\nexport default EpisodeSummary","import React from 'react'\nimport EpisodeSummary from './EpisodeSummary'\nimport { Link } from 'react-router-dom'\n\nconst EpisodeList = ({episodes}) => {\n  return (\n    <div className=\"c-EpisodeList\">\n      {episodes && episodes.map(episode => {\n        return (\n          <Link to={'/episode/' + episode.id} key={episode.id}>\n            <EpisodeSummary episode={episode} />\n          </Link>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default EpisodeList","import React, { Component } from 'react'\nimport Notifications from './Notifications'\nimport EpisodeList from '../episodes/EpisodeList'\nimport { connect } from 'react-redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\nimport { Redirect } from 'react-router-dom'\n\nclass Dashboard extends Component {\n  render() {\n    const { episodes, auth, notifications } = this.props\n\n    if (!auth.uid) return <Redirect to=\"/signin\" />\n\n    return (\n      <div className=\"c-Dashboard\">\n        <div className=\"c-Dashboard__episodes\">\n          <EpisodeList episodes={episodes} />\n        </div>\n        <div className=\"c-Dashboard__notifications\">\n          <Notifications notifications={notifications} />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    episodes: state.firestore.ordered.episodes,\n    auth: state.firebase.auth,\n    notifications: state.firestore.ordered.notifications\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'episodes', orderBy: ['createdAt', 'desc'] },\n    { collection: 'notifications', limit: 3, orderBy: ['time', 'desc'] }\n  ])\n)(Dashboard)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\nimport { Redirect } from 'react-router-dom'\nimport moment from 'moment'\n\nconst EpisodeDetails = (props) => {\n  const { episode, auth } = props\n  if (!auth.uid) return <Redirect to=\"/signin\" />\n\n  if (episode) {\n    return (\n      <div className=\"c-EpisodeDetails\">\n        <div className=\"c-EpisodeDetails__content\">\n          <div className=\"c-EpisodeDetails__title\">\n            {episode.title}\n          </div>\n          <p className=\"c-EpisodeDetails__desc\">\n          {episode.content}\n          </p>\n          <p className=\"c-EpisodeDetails__date\">\n            Plan created: {moment(episode.createdAt.toDate()).calendar()}\n          </p>\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <p>Loading episode</p>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const id = ownProps.match.params.id\n  const episodes = state.firestore.data.episodes\n  const episode = episodes ? episodes[id] : null\n\n  return {\n    episode: episode,\n    auth: state.firebase.auth\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'episodes' }\n  ])\n)(EpisodeDetails)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { signIn } from '../../store/actions/authActions'\nimport { Redirect } from 'react-router-dom'\n\nclass SignIn extends Component {\n  state = {\n    email: '',\n    password: ''\n  }\n\n  handleOnChange = (e) => {\n    this.setState({[e.target.id]: e.target.value})\n  }\n\n  handleOnSubmit = (e) => {\n    e.preventDefault()\n    this.props.signIn(this.state)\n  }\n\n  render() {\n    const { authError, auth } = this.props\n    if (auth.uid) return <Redirect to=\"/\" />\n\n    return (\n      <div className=\"c-SignIn\">\n        <form onSubmit={this.handleOnSubmit} className=\"c-SignIn__form\">\n          <h2 className=\"c-SignIn__heading\">\n            Sign In\n          </h2>\n          <div className=\"c-SignIn__form-row\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" onChange={this.handleOnChange} />\n          </div>\n          <div className=\"c-SignIn__form-row\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" onChange={this.handleOnChange} />\n          </div>\n          <div className=\"c-SignIn__form-row\">\n            <button type=\"submit\">Login</button>\n          </div>\n          <div>\n            {authError ? authError : null}\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    authError: state.auth.authError,\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (creds) => dispatch(signIn(creds))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux';\nimport { signUp } from '../../store/actions/authActions'\n\nclass SignUp extends Component {\n  state = {\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: ''\n  }\n\n  handleOnChange = (e) => {\n    this.setState({[e.target.id]: e.target.value})\n  }\n\n  handleOnSubmit = (e) => {\n    e.preventDefault()\n    this.props.signUp(this.state)\n  }\n\n  render() {\n    const { auth, authError } = this.props\n    if (auth.uid) return <Redirect to=\"/\" />\n\n    return (\n      <div className=\"c-SignUp\">\n        <form onSubmit={this.handleOnSubmit} className=\"c-SignUp__form\">\n          <h2 className=\"c-SignUp__heading\">\n            Sign Up\n          </h2>\n          <div className=\"c-SignUp__form-row\">\n            <label htmlFor=\"firstName\">First Name</label>\n            <input type=\"text\" id=\"firstName\" onChange={this.handleOnChange} />\n          </div>\n          <div className=\"c-SignUp__form-row\">\n            <label htmlFor=\"lastName\">Last Name</label>\n            <input type=\"text\" id=\"lastName\" onChange={this.handleOnChange} />\n          </div>\n          <div className=\"c-SignUp__form-row\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" onChange={this.handleOnChange} />\n          </div>\n          <div className=\"c-SignUp__form-row\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" onChange={this.handleOnChange} />\n          </div>\n          <div className=\"c-SignUp__form-row\">\n            <button type=\"submit\">Sign up</button>\n          </div>\n          <div>\n            {authError ? <p>{authError}</p> : null}\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth,\n    authError: state.auth.authError\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signUp: (newUser) => dispatch(signUp(newUser))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp)\n","export const createEpisode = (episode) => {\n  return (dispatch, getState, { getFirestore, getFirebase }) => {\n    // Make async call to db\n    const firestore = getFirestore()\n    const profile = getState().firebase.profile\n    const authorID = getState().firebase.auth.uid\n\n    firestore.collection('episodes').add({\n      ...episode,\n      authorFirstName: profile.firstName,\n      authorLastName: profile.lastName,\n      authorID: authorID,\n      createdAt: new Date()\n    }).then(() => {\n      dispatch({type: 'CREATE_EPISODE', episode})\n    }).catch((error) => {\n      dispatch({type: 'CREATE_EPISODE_ERROR', error})\n    })\n  }\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { createEpisode } from '../../store/actions/episodeActions'\nimport { Redirect } from 'react-router-dom'\n\nclass CreateEpisode extends Component {\n  state = {\n    title: '',\n    content: ''\n  }\n\n  handleOnChange = (e) => {\n    this.setState({[e.target.id]: e.target.value})\n  }\n\n  handleOnSubmit = (e) => {\n    e.preventDefault()\n    this.props.createEpisode(this.state)\n    this.props.history.push('/')\n  }\n\n  render() {\n    const { auth } = this.props\n    if (!auth.uid) return <Redirect to=\"/signin\" />\n\n    return (\n      <div className=\"c-CreateEpisode\">\n        <form onSubmit={this.handleOnSubmit} className=\"c-CreateEpisode__form\">\n          <h2 className=\"c-CreateEpisode__heading\">\n            Create new episode\n          </h2>\n          <div className=\"c-CreateEpisode__form-row\">\n            <label htmlFor=\"title\">Title</label>\n            <input type=\"text\" id=\"title\" onChange={this.handleOnChange} />\n          </div>\n          <div className=\"c-CreateEpisode__form-row\">\n            <label htmlFor=\"content\">Content</label>\n            <textarea id=\"content\" onChange={this.handleOnChange}></textarea>\n          </div>\n          <div className=\"c-CreateEpisode__form-row\">\n            <button type=\"submit\">Create</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createEpisode: (episode) => dispatch(createEpisode(episode))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateEpisode)\n","import React, { Component } from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Navbar from './components/layout/Navbar'\nimport Dashboard from './components/dashboard/Dashboard'\nimport EpisodeDetails from './components/episodes/EpisodeDetails'\nimport SignIn from './components/auth/SignIn'\nimport SignUp from './components/auth/SignUp'\nimport CreateEpisode from './components/episodes/CreateEpisode'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={Dashboard} />\n            <Route path='/episode/:id' component={EpisodeDetails} />\n            <Route path='/signin' component={SignIn} />\n            <Route path='/signup' component={SignUp} />\n            <Route path='/create' component={CreateEpisode} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n  authError: null\n}\n\nconst authReducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'LOGIN_ERROR':\n      return {\n        ...state,\n        authError: action.error.message\n      }\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        authError: null\n      }\n    case 'SIGNOUT_SUCCESS':\n      return state\n    case 'SIGNUP_SUCCESS':\n      return {\n        ...state,\n        authError: null\n      }\n    case 'SIGNUP_ERROR':\n      return {\n        ...state,\n        authError: action.error.message\n      }\n    default:\n      return state\n  }\n}\n\nexport default authReducer","const initState = {\n  episodes: [\n    {id: 1, title: 'Side Projects', content: 'blah blah blah'},\n    {id: 2, title: 'JavaScript Frameworks', content: 'blah blah blah'},\n    {id: 3, title: 'Breaking the mould', content: 'blah blah blah'}\n  ]\n}\n\nconst episodeReducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'CREATE_EPISODE':\n      return state\n    case 'CREATE_EPISODE_ERROR':\n      return state\n    default:\n      return state\n  }\n}\n\nexport default episodeReducer","import authReducer from './authReducer'\nimport episodeReducer from './episodeReducer'\nimport { combineReducers } from 'redux'\nimport { firestoreReducer } from 'redux-firestore'\nimport { firebaseReducer } from 'react-redux-firebase'\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  episode: episodeReducer,\n  firestore: firestoreReducer,\n  firebase: firebaseReducer\n})\n\nexport default rootReducer","import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyA6G6WJ9e9P5hSyvznwhBiiFzsSDDF6g54\",\n  authDomain: \"podcast-planner.firebaseapp.com\",\n  databaseURL: \"https://podcast-planner.firebaseio.com\",\n  projectId: \"podcast-planner\",\n  storageBucket: \"\",\n  messagingSenderId: \"445914579962\",\n  appId: \"1:445914579962:web:76ad5b189cb4f30d\"\n}\n\nfirebase.initializeApp(firebaseConfig)\nfirebase.firestore().settings({timestampsInSnapshots: true})\n\nexport default firebase","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './store/reducers/rootReducer'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { reduxFirestore, getFirestore } from 'redux-firestore'\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase'\nimport firebaseConfig from './config/firebaseConfig'\n\nconst store = createStore(rootReducer,\n  compose(\n    applyMiddleware(thunk.withExtraArgument({getFirestore, getFirebase})),\n    reduxFirestore(firebaseConfig),\n    reactReduxFirebase(firebaseConfig, {\n      useFirestoreForProfile: true,\n      userProfile: 'users',\n      attachAuthIsReady: true\n    })\n  )\n)\n\nstore.firebaseAuthIsReady.then(() => {\n  ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'))\n  serviceWorker.unregister()\n})\n"],"sourceRoot":""}